[{"content":"Destiny Inventory Manager packaged with Electron.js to use as a desktop application.\nElectron is a framework that enables you to create desktop applications with JavaScript, HTML, and CSS. These applications can then be packaged to run directly as an .exe\nconst { BrowserWindow, app, Menu } = require(\u0026#39;electron\u0026#39;) function createwindow() { const win = new BrowserWindow({ title: \u0026#34;Destiny Inventory Manager\u0026#34; }) win.loadURL(\u0026#39;https://app.destinyitemmanager.com/\u0026#39;) win.maximize() var menu = Menu.buildFromTemplate([ { label: \u0026#39;File\u0026#39;, submenu: [ { label:\u0026#39;Exit\u0026#39;, accelerator: \u0026#39;CmdOrCtrl+Q\u0026#39;, click() { app.quit(); } } ], }, { label: \u0026#39;Update Contents\u0026#39;, submenu: [ { label:\u0026#39;Reload Page\u0026#39;, accelerator: \u0026#39;F5\u0026#39;, click() { win.reload() } }, { label:\u0026#39;Force Reload\u0026#39;, accelerator: \u0026#39;CmdOrCtrl+F5\u0026#39;, click() { win.webContents.reloadIgnoringCache() } }, { label:\u0026#39;Developer Console\u0026#39;, accelerator: \u0026#39;F12\u0026#39;, click() { win.webContents.openDevTools() } }, ], }, { label: \u0026#39;Fireteam\u0026#39;, submenu: [ { label:\u0026#39;Search Fireteam\u0026#39;, click() { win.loadURL(\u0026#39;https://www.bungie.net/en/ClanV2/FireteamSearch/\u0026#39;) } } ], }, { label: \u0026#39;Item Manager\u0026#39;, submenu: [ { label:\u0026#39;Open DIM\u0026#39;, click() { win.loadURL(\u0026#39;https://app.destinyitemmanager.com/\u0026#39;) } } ], } ]) Menu.setApplicationMenu(menu); } app.whenReady().then(createwindow) app.on(\u0026#39;window-all-closed\u0026#39;, () =\u0026gt; { if(process.platform !== \u0026#39;darwin\u0026#39;) { app.quit() } }) app.on(\u0026#39;activate\u0026#39;, () =\u0026gt; { if (BrowserWindow.getAllWindows().length === 0) { createWindow() } }) Nodejs Package Built \u0026amp; Run with Node.js\n{ \u0026#34;name\u0026#34;: \u0026#34;dim\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;DIM\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;main.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;electron .\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;electron-packager . dim --platform win32 --arch x64 --icon=resources/dim.ico --out dist/\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;DunkelArts\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;electron\u0026#34;: \u0026#34;^9.1.2\u0026#34;, \u0026#34;electron-packager\u0026#34;: \u0026#34;^15.0.0\u0026#34; } } ","permalink":"https://www.dunkelarts.ch/posts/post1/","summary":"Destiny Inventory Manager packaged with Electron.js to use as a desktop application.","title":"Destiny Inventory Manager"},{"content":"For hosting any Web-Application on my Home-Server I\u0026rsquo;ve setup a SSL Proxy to encrypt all traffic.\nThe whole environement is built with Docker-Containers to easly move ot to an other machine.\nThe Nginx-proxy detects every container startet in the frontend network with the variables VIRTUAL_HOST and LETSENCRYPT_HOST. The TLS Certificates are issued by Lets Encrypt and automatically renewed by Certbot.\nversion: \u0026#39;2\u0026#39; services: nginx-proxy: image: jwilder/nginx-proxy container_name: nginx-proxy ports: - \u0026#34;80:80\u0026#34; - \u0026#34;443:443\u0026#34; volumes: - ./certs:/etc/nginx/certs:ro - /etc/nginx/vhost.d - /var/run/docker.sock:/tmp/docker.sock:ro - /usr/share/nginx/html labels: - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true nginx-proxy-ssl: image: jrcs/letsencrypt-nginx-proxy-companion container_name: nginx-proxy-ssl volumes: - ./certs:/etc/nginx/certs:rw - /var/run/docker.sock:/var/run/docker.sock:ro volumes_from: - nginx-proxy networks: default: external: name: frontend Default Container configuration For a Container to be detected, it has to be in the frontend network with the environement variables VIRTUAL_HOST and LETSENCRYPT_HOST set.\nversion: \u0026#39;3.3\u0026#39; services: apache1: image: httpd:2.4 ports: - 8001:80 volumes: - ./src:/usr/local/apache2/htdocs/ environment: VIRTUAL_HOST: www.dunkelarts.ch LETSENCRYPT_HOST: www.dunkelarts.ch networks: - \u0026#34;frontend\u0026#34; networks: frontend: external: true ","permalink":"https://www.dunkelarts.ch/posts/post2/","summary":"Nginx-SSL Proxy for my Own-Webserver","title":"SSL Proxy with Docker"}]